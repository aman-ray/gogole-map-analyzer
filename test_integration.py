"""Integration test for logging functionality with real application flow."""

import os
import tempfile
import shutil
from pathlib import Path
from datetime import datetime

from tradescout.logging_config import setup_logging, info, debug, warning, error
from tradescout.models import SearchConfig
from tradescout.cache import DedupeCache, ResultsCache
from tradescout.tiling import generate_tiles
from tradescout.exporters import DataExporter, print_summary


def test_logging_integration():
    """Test logging integration with actual application components."""
    print("üß™ Testing Logging Integration")
    print("=" * 50)
    
    # Create temporary directory for test
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = os.path.join(temp_dir, "test_logs")
        cache_dir = os.path.join(temp_dir, "cache")
        
        # Setup logging
        setup_logging(log_level="DEBUG", log_dir=log_dir)
        info("Starting logging integration test")
        
        # Test configuration creation
        config = SearchConfig(
            center_lat=53.3498,
            center_lng=-6.2603,
            radius_km=5,
            max_results=10
        )
        info(f"Created configuration for {config.center_lat:.4f}, {config.center_lng:.4f}")
        debug(f"Configuration details: radius={config.radius_km}km, categories={len(config.categories)}")
        
        # Test cache initialization
        dedupe_cache = DedupeCache(cache_dir)
        results_cache = ResultsCache(cache_dir)  # Use default behavior for integration tests
        info(f"Cache initialized with {dedupe_cache.size()} existing entries")
        
        # Test tile generation
        debug("Generating search tiles")
        tiles = generate_tiles(
            config.center_lat, config.center_lng,
            config.radius_km, config.tile_size_km
        )
        info(f"Generated {len(tiles)} tiles for search area")
        
        # Test warning and error logging
        if len(tiles) > 50:
            warning(f"Large number of tiles generated: {len(tiles)}")
        
        # Simulate some business data for export testing
        from tradescout.models import Business
        sample_business = Business(
            place_name="Test Plumber Ltd",
            category="plumber",
            rating=None,
            review_count=0,
            website=None,
            phone="+353-1-555-0001",
            address_full="Test Address, Dublin",
            locality="Dublin",
            postal_code="D01 TEST",
            lat=53.3498,
            lng=-6.2603,
            maps_profile_url="https://maps.google.com/test"
        )
        
        results_cache.add_business(sample_business, dedupe_cache)
        info("Added sample business for export testing")
        
        # Test export logging
        output_prefix = os.path.join(temp_dir, "test_export")
        exporter = DataExporter(output_prefix)
        exporter.export_all(results_cache.get_results())
        
        # Check log file was created
        today = datetime.now().strftime('%Y-%m-%d')
        log_file = os.path.join(log_dir, f"tradescout_{today}.log")
        
        if os.path.exists(log_file):
            print("‚úÖ Log file created successfully")
            
            # Read and display some log content
            with open(log_file, 'r') as f:
                log_content = f.read()
            
            # Check for expected log messages
            expected_messages = [
                "Starting logging integration test",
                "Created configuration",
                "Cache initialized",
                "Generated",
                "tiles for search area",
                "Added sample business"
            ]
            
            found_messages = []
            for msg in expected_messages:
                if msg in log_content:
                    found_messages.append(msg)
            
            print(f"‚úÖ Found {len(found_messages)}/{len(expected_messages)} expected log messages")
            
            # Display log statistics
            lines = log_content.split('\n')
            debug_lines = [l for l in lines if 'DEBUG' in l]
            info_lines = [l for l in lines if 'INFO' in l]
            warning_lines = [l for l in lines if 'WARNING' in l]
            error_lines = [l for l in lines if 'ERROR' in l]
            
            print(f"üìä Log statistics:")
            print(f"   DEBUG: {len(debug_lines)} messages")
            print(f"   INFO: {len(info_lines)} messages")
            print(f"   WARNING: {len(warning_lines)} messages")
            print(f"   ERROR: {len(error_lines)} messages")
            
            # Show sample log entries
            print("\nüìù Sample log entries:")
            for line in lines[:5]:
                if line.strip():
                    print(f"   {line}")
            
            return True
        else:
            error("Log file was not created")
            return False


def test_error_scenarios():
    """Test logging in error scenarios."""
    print("\nüö® Testing Error Scenario Logging")
    print("=" * 50)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = os.path.join(temp_dir, "error_logs")
        setup_logging(log_level="DEBUG", log_dir=log_dir)
        
        # Test various error scenarios that would occur in real usage
        try:
            # Simulate geocoding error
            raise ValueError("Failed to geocode address: 'invalid address'")
        except Exception as e:
            error(f"Geocoding failed: {e}")
        
        try:
            # Simulate browser connection error
            raise ConnectionError("Failed to connect to browser")
        except Exception as e:
            error(f"Browser error: {e}")
        
        try:
            # Simulate export error
            raise PermissionError("Cannot write to output directory")
        except Exception as e:
            error(f"Export failed: {e}")
        
        warning("Simulated various error conditions for logging test")
        info("Error scenario testing completed")
        
        # Check log file
        today = datetime.now().strftime('%Y-%m-%d')
        log_file = os.path.join(log_dir, f"tradescout_{today}.log")
        
        if os.path.exists(log_file):
            with open(log_file, 'r') as f:
                content = f.read()
                
            error_count = content.count('ERROR')
            warning_count = content.count('WARNING')
            
            print(f"‚úÖ Logged {error_count} errors and {warning_count} warnings")
            
            # Show error messages
            lines = content.split('\n')
            error_lines = [l for l in lines if 'ERROR' in l]
            print("\nüîç Error messages logged:")
            for line in error_lines[-3:]:  # Show last 3 errors
                if line.strip():
                    print(f"   {line}")
            
            return True
        
        return False


def main():
    """Run all logging integration tests."""
    print("üß™ Running Logging Integration Tests")
    print("=" * 60)
    
    success = True
    
    try:
        success &= test_logging_integration()
        success &= test_error_scenarios()
        
        if success:
            print("\n‚úÖ All logging integration tests passed!")
            print("\nüìã Summary:")
            print("   ‚úì Date-wise log files created in logs/ directory")
            print("   ‚úì Different log levels working correctly")
            print("   ‚úì User messages still visible while logging to files")
            print("   ‚úì Error and warning scenarios properly logged")
            print("   ‚úì Integration with cache, tiling, and export modules")
            print("\nüéØ The '0 results' issue is caused by missing Playwright browser.")
            print("   Run: playwright install chromium")
        else:
            print("\n‚ùå Some logging integration tests failed!")
            
    except Exception as e:
        print(f"\nüí• Test execution failed: {e}")
        success = False
    
    return success


if __name__ == "__main__":
    main()